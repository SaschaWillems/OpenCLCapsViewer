/*
*
* OpenCL hardware capability viewer
*
* Copyright (C) 2021 by Sascha Willems (www.saschawillems.de)
*
* This code is free software, you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License version 3 as published by the Free Software Foundation.
*
* Please review the following information to ensure the GNU Lesser
* General Public License version 3 requirements will be met:
* http://opensource.org/licenses/lgpl-3.0.html
*
* The code is distributed WITHOUT ANY WARRANTY; without even the
* implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
* PURPOSE.  See the GNU LGPL 3.0 for more details.
*
*/

#pragma once

#include "CL/cl.h"
#include "CL/cl_ext.h"
#include <vector>
#include <sstream>
#include <QString>

enum class clValueType {
	cl_bool,
	cl_char,
	cl_command_queue_properties,
	cl_device_atomic_capabilities,
	cl_device_device_enqueue_capabilities,
	cl_device_exec_capabilities,
	cl_device_fp_config,
	cl_device_local_mem_type,
	cl_device_mem_cache_type,
	cl_device_svm_capabilities,
	cl_device_type,
	cl_name_version_array,
	cl_device_partition_property_array,
	cl_device_affinity_domain,
	cl_version_khr,
	cl_size_t,
	cl_size_t_array,
	cl_int_array,
	cl_uchar,
	cl_uint,
	cl_uint_array,
	cl_ulong,
	cl_version,
	cl_device_pci_bus_info_khr,
	cl_device_controlled_termination_capabilities_arm,
	cl_device_scheduling_controls_capabilities_arm,
	cl_queue_family_properties_intel,
	cl_device_integer_dot_product_capabilities_khr,
	cl_device_integer_dot_product_acceleration_properties_khr,
	cl_external_memory_handle_type_khr_array,
	cl_external_semaphore_handle_type_khr,
	special
};

namespace utils
{
	inline QString clVersionString(cl_version version)
	{
		std::stringstream ss;
		ss << CL_VERSION_MAJOR(version) << "." << CL_VERSION_MINOR(version) << "." << CL_VERSION_PATCH(version);
		QString res = QString::fromStdString(ss.str());
		return res;
	}

	inline QString deviceInfoString(const cl_device_info info)
	{
		switch (info)
		{
#define STR(r) case r: return #r
			STR(CL_DEVICE_TYPE);
			STR(CL_DEVICE_VENDOR_ID);
			STR(CL_DEVICE_MAX_COMPUTE_UNITS);
			STR(CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS);
			STR(CL_DEVICE_MAX_WORK_GROUP_SIZE);
			STR(CL_DEVICE_MAX_WORK_ITEM_SIZES);
			STR(CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR);
			STR(CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT);
			STR(CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT);
			STR(CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG);
			STR(CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT);
			STR(CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE);
			STR(CL_DEVICE_MAX_CLOCK_FREQUENCY);
			STR(CL_DEVICE_ADDRESS_BITS);
			STR(CL_DEVICE_MAX_READ_IMAGE_ARGS);
			STR(CL_DEVICE_MAX_WRITE_IMAGE_ARGS);
			STR(CL_DEVICE_MAX_MEM_ALLOC_SIZE);
			STR(CL_DEVICE_IMAGE2D_MAX_WIDTH);
			STR(CL_DEVICE_IMAGE2D_MAX_HEIGHT);
			STR(CL_DEVICE_IMAGE3D_MAX_WIDTH);
			STR(CL_DEVICE_IMAGE3D_MAX_HEIGHT);
			STR(CL_DEVICE_IMAGE3D_MAX_DEPTH);
			STR(CL_DEVICE_IMAGE_SUPPORT);
			STR(CL_DEVICE_MAX_PARAMETER_SIZE);
			STR(CL_DEVICE_MAX_SAMPLERS);
			STR(CL_DEVICE_MEM_BASE_ADDR_ALIGN);
			STR(CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE);
			STR(CL_DEVICE_SINGLE_FP_CONFIG);
			STR(CL_DEVICE_GLOBAL_MEM_CACHE_TYPE);
			STR(CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE);
			STR(CL_DEVICE_GLOBAL_MEM_CACHE_SIZE);
			STR(CL_DEVICE_GLOBAL_MEM_SIZE);
			STR(CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE);
			STR(CL_DEVICE_MAX_CONSTANT_ARGS);
			STR(CL_DEVICE_LOCAL_MEM_TYPE);
			STR(CL_DEVICE_LOCAL_MEM_SIZE);
			STR(CL_DEVICE_ERROR_CORRECTION_SUPPORT);
			STR(CL_DEVICE_PROFILING_TIMER_RESOLUTION);
			STR(CL_DEVICE_ENDIAN_LITTLE);
			STR(CL_DEVICE_AVAILABLE);
			STR(CL_DEVICE_COMPILER_AVAILABLE);
			STR(CL_DEVICE_EXECUTION_CAPABILITIES);
			STR(CL_DEVICE_QUEUE_ON_HOST_PROPERTIES);
			STR(CL_DEVICE_NAME);
			STR(CL_DEVICE_VENDOR);
			STR(CL_DRIVER_VERSION);
			STR(CL_DEVICE_PROFILE);
			STR(CL_DEVICE_VERSION);
			STR(CL_DEVICE_EXTENSIONS);
			STR(CL_DEVICE_PLATFORM);
			STR(CL_DEVICE_DOUBLE_FP_CONFIG);
			STR(CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF);
			STR(CL_DEVICE_HOST_UNIFIED_MEMORY);
			STR(CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR);
			STR(CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT);
			STR(CL_DEVICE_NATIVE_VECTOR_WIDTH_INT);
			STR(CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG);
			STR(CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT);
			STR(CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE);
			STR(CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF);
			STR(CL_DEVICE_OPENCL_C_VERSION);
			STR(CL_DEVICE_LINKER_AVAILABLE);
			STR(CL_DEVICE_BUILT_IN_KERNELS);
			STR(CL_DEVICE_IMAGE_MAX_BUFFER_SIZE);
			STR(CL_DEVICE_IMAGE_MAX_ARRAY_SIZE);
			STR(CL_DEVICE_PARENT_DEVICE);
			STR(CL_DEVICE_PARTITION_MAX_SUB_DEVICES);
			STR(CL_DEVICE_PARTITION_PROPERTIES);
			STR(CL_DEVICE_PARTITION_AFFINITY_DOMAIN);
			STR(CL_DEVICE_PARTITION_TYPE);
			STR(CL_DEVICE_REFERENCE_COUNT);
			STR(CL_DEVICE_PREFERRED_INTEROP_USER_SYNC);
			STR(CL_DEVICE_PRINTF_BUFFER_SIZE);
			STR(CL_DEVICE_IMAGE_PITCH_ALIGNMENT);
			STR(CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT);
			STR(CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS);
			STR(CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE);
			STR(CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES);
			STR(CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE);
			STR(CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE);
			STR(CL_DEVICE_MAX_ON_DEVICE_QUEUES);
			STR(CL_DEVICE_MAX_ON_DEVICE_EVENTS);
			STR(CL_DEVICE_SVM_CAPABILITIES);
			STR(CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE);
			STR(CL_DEVICE_MAX_PIPE_ARGS);
			STR(CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS);
			STR(CL_DEVICE_PIPE_MAX_PACKET_SIZE);
			STR(CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT);
			STR(CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT);
			STR(CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT);
			STR(CL_DEVICE_IL_VERSION);
			STR(CL_DEVICE_MAX_NUM_SUB_GROUPS);
			STR(CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS);
			STR(CL_DEVICE_NUMERIC_VERSION);
			STR(CL_DEVICE_EXTENSIONS_WITH_VERSION);
			STR(CL_DEVICE_ILS_WITH_VERSION);
			STR(CL_DEVICE_BUILT_IN_KERNELS_WITH_VERSION);
			STR(CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES);
			STR(CL_DEVICE_ATOMIC_FENCE_CAPABILITIES);
			STR(CL_DEVICE_NON_UNIFORM_WORK_GROUP_SUPPORT);
			STR(CL_DEVICE_OPENCL_C_ALL_VERSIONS);
			STR(CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_MULTIPLE);
			STR(CL_DEVICE_WORK_GROUP_COLLECTIVE_FUNCTIONS_SUPPORT);
			STR(CL_DEVICE_GENERIC_ADDRESS_SPACE_SUPPORT);
			STR(CL_DEVICE_OPENCL_C_FEATURES);
			STR(CL_DEVICE_DEVICE_ENQUEUE_CAPABILITIES);
			STR(CL_DEVICE_PIPE_SUPPORT);
			STR(CL_DEVICE_LATEST_CONFORMANCE_VERSION_PASSED);
			// cl_nv_device_attribute_query 
			STR(CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV);
			STR(CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV);
			STR(CL_DEVICE_REGISTERS_PER_BLOCK_NV);
			STR(CL_DEVICE_WARP_SIZE_NV);
			STR(CL_DEVICE_GPU_OVERLAP_NV);
			STR(CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV);
			STR(CL_DEVICE_INTEGRATED_MEMORY_NV);
			// cl_khr_device_uuid
			STR(CL_DEVICE_UUID_KHR);
			STR(CL_DRIVER_UUID_KHR);
			STR(CL_DEVICE_LUID_VALID_KHR);
			STR(CL_DEVICE_LUID_KHR);
			STR(CL_DEVICE_NODE_MASK_KHR);
			// cl_khr_extended_versioning
			// STR(DEVICE_NUMERIC_VERSION_KHR);
			STR(CL_DEVICE_OPENCL_C_NUMERIC_VERSION_KHR);
			// cl_khr_fp16
			STR(CL_DEVICE_HALF_FP_CONFIG);
			// cl_khr_spir
			STR(CL_DEVICE_SPIR_VERSIONS);
			// STR(DEVICE_EXTENSIONS_WITH_VERSION_KHR);
			// STR(DEVICE_BUILT_IN_KERNELS_WITH_VERSION_KHR);
			// cl_khr_pci_bus_info
			STR(CL_DEVICE_PCI_BUS_INFO_KHR);
			// cl_khr_integer_dot_product
			STR(CL_DEVICE_INTEGER_DOT_PRODUCT_CAPABILITIES_KHR);
			STR(CL_DEVICE_INTEGER_DOT_PRODUCT_ACCELERATION_PROPERTIES_8BIT_KHR);
			STR(CL_DEVICE_INTEGER_DOT_PRODUCT_ACCELERATION_PROPERTIES_4x8BIT_PACKED_KHR);
			// cl_khr_external_memory
			STR(CL_DEVICE_EXTERNAL_MEMORY_IMPORT_HANDLE_TYPES_KHR);
			// cl_khr_external_semaphore
			STR(CL_DEVICE_SEMAPHORE_IMPORT_HANDLE_TYPES_KHR);
			STR(CL_DEVICE_SEMAPHORE_EXPORT_HANDLE_TYPES_KHR);
			// cl_ext_device_fission
			STR(CL_DEVICE_PARENT_DEVICE_EXT);
			STR(CL_DEVICE_PARTITION_TYPES_EXT);
			STR(CL_DEVICE_AFFINITY_DOMAINS_EXT);
			STR(CL_DEVICE_REFERENCE_COUNT_EXT);
			STR(CL_DEVICE_PARTITION_STYLE_EXT);
			// cl_ext_cxx_for_opencl
			STR(CL_DEVICE_CXX_FOR_OPENCL_NUMERIC_VERSION_EXT);
			// cl_arm_shared_virtual_memory
			STR(CL_DEVICE_SVM_CAPABILITIES_ARM);
			// cl_arm_get_core_id
			STR(CL_DEVICE_COMPUTE_UNITS_BITFIELD_ARM);
			// cl_arm_controlled_kernel_termination
			STR(CL_DEVICE_CONTROLLED_TERMINATION_CAPABILITIES_ARM);
			// cl_arm_scheduling_controls
			STR(CL_DEVICE_SCHEDULING_CONTROLS_CAPABILITIES_ARM);
			STR(CL_DEVICE_SUPPORTED_REGISTER_ALLOCATIONS_ARM);
			// cl_intel_advanced_motion_estimation
			STR(CL_DEVICE_ME_VERSION_INTEL);
			// cl_intel_simultaneous_sharing
			STR(CL_DEVICE_SIMULTANEOUS_INTEROPS_INTEL);
			STR(CL_DEVICE_NUM_SIMULTANEOUS_INTEROPS_INTEL);
			// cl_intel_required_subgroup_size
			STR(CL_DEVICE_SUB_GROUP_SIZES_INTEL);
			// cl_intel_planar_yuv
			STR(CL_DEVICE_PLANAR_YUV_MAX_WIDTH_INTEL);
			STR(CL_DEVICE_PLANAR_YUV_MAX_HEIGHT_INTEL);
			// cl_intel_device_side_avc_motion_estimation
			STR(CL_DEVICE_AVC_ME_VERSION_INTEL);
			STR(CL_DEVICE_AVC_ME_SUPPORTS_TEXTURE_SAMPLER_USE_INTEL);
			STR(CL_DEVICE_AVC_ME_SUPPORTS_PREEMPTION_INTEL);
			// cl_intel_unified_shared_memory
			STR(CL_DEVICE_HOST_MEM_CAPABILITIES_INTEL);
			STR(CL_DEVICE_DEVICE_MEM_CAPABILITIES_INTEL);
			STR(CL_DEVICE_SINGLE_DEVICE_SHARED_MEM_CAPABILITIES_INTEL);
			STR(CL_DEVICE_CROSS_DEVICE_SHARED_MEM_CAPABILITIES_INTEL);
			STR(CL_DEVICE_SHARED_SYSTEM_MEM_CAPABILITIES_INTEL);
			// cl_intel_command_queue_families
			STR(CL_DEVICE_QUEUE_FAMILY_PROPERTIES_INTEL);
			// cl_qcom_ext_host_ptr
			STR(CL_DEVICE_EXT_MEM_PADDING_IN_BYTES_QCOM);
			STR(CL_DEVICE_PAGE_SIZE_QCOM);
			// cl_amd_device_attribute_query
			STR(CL_DEVICE_PROFILING_TIMER_OFFSET_AMD);
			STR(CL_DEVICE_TOPOLOGY_AMD);
			STR(CL_DEVICE_BOARD_NAME_AMD);
			STR(CL_DEVICE_GLOBAL_FREE_MEMORY_AMD);
			STR(CL_DEVICE_SIMD_PER_COMPUTE_UNIT_AMD);
			STR(CL_DEVICE_SIMD_WIDTH_AMD);
			STR(CL_DEVICE_SIMD_INSTRUCTION_WIDTH_AMD);
			STR(CL_DEVICE_WAVEFRONT_WIDTH_AMD);
			STR(CL_DEVICE_GLOBAL_MEM_CHANNELS_AMD);
			STR(CL_DEVICE_GLOBAL_MEM_CHANNEL_BANKS_AMD);
			STR(CL_DEVICE_GLOBAL_MEM_CHANNEL_BANK_WIDTH_AMD);
			STR(CL_DEVICE_LOCAL_MEM_SIZE_PER_COMPUTE_UNIT_AMD);
			STR(CL_DEVICE_LOCAL_MEM_BANKS_AMD);
			STR(CL_DEVICE_THREAD_TRACE_SUPPORTED_AMD);
			STR(CL_DEVICE_GFXIP_MAJOR_AMD);
			STR(CL_DEVICE_GFXIP_MINOR_AMD);
			STR(CL_DEVICE_AVAILABLE_ASYNC_QUEUES_AMD);
			STR(CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_AMD);
			STR(CL_DEVICE_MAX_WORK_GROUP_SIZE_AMD);
			STR(CL_DEVICE_PREFERRED_CONSTANT_BUFFER_SIZE_AMD);
			STR(CL_DEVICE_PCIE_ID_AMD);

#undef STR
		default: return "?";
		}
	}

	inline QString platformInfoString(const cl_platform_info info)
	{
		switch (info)
		{
#define STR(r) case r: return #r
			STR(CL_PLATFORM_PROFILE);
			STR(CL_PLATFORM_VERSION);
			STR(CL_PLATFORM_NAME);
			STR(CL_PLATFORM_VENDOR);
			STR(CL_PLATFORM_EXTENSIONS);
			STR(CL_PLATFORM_HOST_TIMER_RESOLUTION);
			STR(CL_PLATFORM_NUMERIC_VERSION);
			STR(CL_PLATFORM_EXTENSIONS_WITH_VERSION);
			// cl_khr_icd
			STR(CL_PLATFORM_ICD_SUFFIX_KHR);
#undef STR
		default: return "?";
		}
	}

	inline QString imageTypeString(const cl_mem_object_type type)
	{
		switch (type)
		{
#define STR(r) case CL_MEM_OBJECT_##r: return #r
			STR(IMAGE1D);
			STR(IMAGE1D_BUFFER);
			STR(IMAGE2D);
			STR(IMAGE3D);
			STR(IMAGE1D_ARRAY);
			STR(IMAGE2D_ARRAY);
#undef STR
		default: return "?";
		}
	}

	inline QString channelOrderString(const cl_channel_order order)
	{
		switch (order)
		{
#define STR(r) case CL_##r: return #r
			STR(R);
			STR(A);
			STR(RG);
			STR(RA);
			STR(RGB);
			STR(RGBA);
			STR(BGRA);
			STR(ARGB);
			STR(INTENSITY);
			STR(LUMINANCE);
			STR(Rx);
			STR(RGx);
			STR(RGBx);
			STR(DEPTH);
			STR(DEPTH_STENCIL);
			STR(sRGB);
			STR(sRGBx);
			STR(sRGBA);
			STR(sBGRA);
			STR(ABGR);
			STR(YUYV_INTEL);
			STR(UYVY_INTEL);
			STR(YVYU_INTEL);
			STR(VYUY_INTEL);
			STR(NV12_INTEL);
#undef STR
		default: return "?";
		}
	}

	inline QString channelTypeString(const cl_channel_type type)
	{
		switch (type)
		{
#define STR(r) case CL_##r: return #r
			STR(SNORM_INT8);
			STR(SNORM_INT16);
			STR(UNORM_INT8);
			STR(UNORM_INT16);
			STR(UNORM_SHORT_565);
			STR(UNORM_SHORT_555);
			STR(UNORM_INT_101010);
			STR(SIGNED_INT8);
			STR(SIGNED_INT16);
			STR(SIGNED_INT32);
			STR(UNSIGNED_INT8);
			STR(UNSIGNED_INT16);
			STR(UNSIGNED_INT32);
			STR(HALF_FLOAT);
			STR(FLOAT);
			STR(UNORM_INT24);
			STR(UNORM_INT_101010_2);
#undef STR
		default: return "?";
		}
	}

	inline QString memFlagsString(const cl_mem_flags flag)
	{
		switch (flag)
		{
#define STR(r) case CL_MEM_##r: return #r
			STR(READ_WRITE);
			STR(READ_ONLY);
			STR(WRITE_ONLY);
			STR(KERNEL_READ_AND_WRITE);
#undef STR
		default: return "?";
		}
	}

	inline std::vector<std::string> explode(const std::string& str, char delimiter)
	{
		std::vector<std::string> tokens;
		std::stringstream tokenStream(str);
		std::string tempStr;
		while (std::getline(tokenStream, tempStr, delimiter)) {
			tokens.push_back(tempStr);
		}
		return tokens;
	}

}